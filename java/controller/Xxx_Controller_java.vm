## Include
#parse("include/var_entity.vm")
## Use macro resolve header
#package($SRC)
## use macro for feed $haveCriteria
#haveCriteria()
## Resolve mapping path, e.g. "{customerCode}/{bookId}"
#set($mappingPath = '')
#foreach($field in $entity.keyAttributes)
#if($foreach.count > 1)
#set($mappingPath = "${mappingPath}/")
#end
#set($mappingPath = "${mappingPath}{$field.name}")
#end
## Resolve path variable, e.g. "@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId"
#set($pathVariable = '')
#foreach( $field in $entity.keyAttributes )
#if($foreach.count > 1)
#set($pathVariable = "${pathVariable}, ")
#end
#set($pathVariable = "${pathVariable}@PathVariable(""${field.name}"") ${field.type} $field.name" )
#end
## Resolve id for logger, e.g. "{customerCode}/{bookId}"
#set($idForLogger = '')
#foreach($field in $entity.keyAttributes)
#set($idForLogger = "${idForLogger}/$field.name")
#end

import ${pack_entity}.$entityClass;
import ${pack_service}.$serviceInterface;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/$entityInstance", produces = "application/hal+json")
public class $controllerClass {

	private static final Logger LOGGER = LoggerFactory.getLogger(${controllerClass}.class);

	private static final String NOT_FOUND ="$entityClass not found";

	@Autowired
	private $serviceInterface ${serviceInstance};

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<${entityClass}> findAll() {
		List<${entityClass}> list = ${serviceInstance}.findAll();
		return list;
	}


	@GetMapping("$mappingPath")
	public $entityClass get($pathVariable) {
		final $entityClass $entityInstance = ${serviceInstance}.getOne($keyArgsList);
		LOGGER.info("$entityClass found : {}", $entityInstance);
		return $entityInstance;
	}

	@PostMapping(consumes = "application/json")
	public $entityClass create(@RequestBody $entityClass $entityInstance) {
		LOGGER.info("$entityClass creation request : {}", $entityInstance);
		if (${serviceInstance}.exist($entityInstance)) {
			LOGGER.info("$entityClass already exist ! : {}", $entityInstance);
			return null;
		} else {
			final $entityClass created = ${serviceInstance}.create($entityInstance);
			LOGGER.info("Created $entityInstance {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public $entityClass update(@RequestBody $entityClass $entityInstance) {
		return ${serviceInstance}.update($entityInstance);
	}

	@DeleteMapping("$mappingPath")
	public void delete($pathVariable) {
		LOGGER.info("$entityClass deletion request : {}", resolveIdForLogger($keyArgsList));
		if (${serviceInstance}.delete($keyArgsList)) {
			LOGGER.info("$entityClass succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger($keyArgsListWrapperType) {
		final StringBuilder ids = new StringBuilder();
#foreach($field in $entity.keyAttributes)
#if($foreach.count > 1)
		ids.append("/");
#end
		ids.append(String.valueOf($field.name));
#end
		return ids.toString();
	}

}


